name: Build and Deploy Docker Image

on:
  push:
    branches: ['master']
  pull_request:
    branches: ['master']

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v3
      
      # Improved Rust caching for tests
      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          # Cache test artifacts separately
          prefix-key: "rust-test"
          # Include test-specific artifacts
          cache-targets: true
          # Cache both debug and release builds for tests
          cache-on-failure: true
          # Add test-specific directories
          cache-directories: |
            target/debug/deps
            target/debug/build
            target/debug/.fingerprint
      
      - name: Run unit tests
        env:
          RUST_MIN_STACK: 16777216
        run: for i in {1..3}; do cargo test && break || if [ $i -eq 3 ]; then exit 1; fi; sleep 5; done

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: gurghet
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        uses: docker/build-push-action@v5.1.0
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name == 'push' }}
          platforms: linux/arm64
          build-args: |
            VERSION=${{ github.sha }}
          tags: |
            ghcr.io/gurghet/ruggine:${{ github.sha }}
            ghcr.io/gurghet/ruggine:latest
          cache-from: |
            type=gha
            type=registry,ref=ghcr.io/gurghet/ruggine:buildcache
          cache-to: |
            type=gha,mode=max
            type=registry,ref=ghcr.io/gurghet/ruggine:buildcache,mode=max

      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2

      - name: Update staging image tag and commit
        if: github.event_name == 'push'
        run: |
          # Debug information
          echo "Current SHA: ${{ github.sha }}"
          echo "Short SHA: ${{ github.sha_short }}"
          echo "Ref: ${{ github.ref }}"
          
          cd infra/overlays/staging
          kustomize edit set image ghcr.io/gurghet/ruggine:${{ github.sha }}
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add kustomization.yaml
          git commit -m "ci: update staging environment to ruggine:${{ github.sha }}"
          git push

      - name: Create Release
        if: github.event_name == 'push'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.sha }}
          generate_release_notes: true

      - name: Notify Deploy Success
        if: success()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"ðŸš€ Ruggine Docker image built and deployed successfully! Tag: ${{ github.sha }}\"}"

      - name: Notify Deploy Failure
        if: failure()
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d "{\"chat_id\": \"${{ secrets.TELEGRAM_CHAT_ID }}\", \"text\": \"ðŸ’¥ Ruggine Docker build/deploy failed! Check the GitHub Actions logs for details.\"}"
